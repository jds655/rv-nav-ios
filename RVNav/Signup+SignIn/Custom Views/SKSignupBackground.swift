// Maybe this can be used in the future?
//
//
//  SKSignupBackground.swift
//  RVNav
//
//  Created by Joshua Sharp on 1/4/20.
//  Copyright Â© 2020 Lambda School Inc.. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//
//  This code was generated by Trial version of PaintCode, therefore cannot be used for commercial purposes.
//



import UIKit

public class SKSignupBackground : NSObject {

    //// Drawing Methods

    @objc dynamic public class func drawCanvas1(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 812), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 812), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 812)


        //// Color Declarations
        let gradientColor = UIColor(red: 0.000, green: 0.698, blue: 0.851, alpha: 0.045)
        let gradientColor2 = UIColor(red: 0.980, green: 0.627, blue: 0.365, alpha: 0.050)
        let gradientColor3 = UIColor(red: 0.000, green: 0.561, blue: 0.851, alpha: 0.090)
        let gradientColor4 = UIColor(red: 0.980, green: 0.627, blue: 0.365, alpha: 0.100)
        let fillColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let fillColor2 = UIColor(red: 0.980, green: 0.627, blue: 0.365, alpha: 1.000)
        let fillColor3 = UIColor(red: 0.949, green: 0.949, blue: 0.949, alpha: 1.000)
        let fillColor4 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        let fillColor5 = UIColor(red: 0.749, green: 0.753, blue: 0.780, alpha: 1.000)
        let fillColor6 = UIColor(red: 0.957, green: 0.961, blue: 0.965, alpha: 1.000)
        let strokeColor = UIColor(red: 0.165, green: 0.180, blue: 0.263, alpha: 1.000)
        let strokeColor2 = UIColor(red: 0.333, green: 0.345, blue: 0.412, alpha: 1.000)
        let fillColor7 = UIColor(red: 0.333, green: 0.345, blue: 0.412, alpha: 1.000)
        let fillColor8 = UIColor(red: 0.165, green: 0.180, blue: 0.263, alpha: 1.000)
        let fillColor9 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 0.500)

        //// Gradient Declarations
        let paint1_linear = CGGradient(colorsSpace: nil, colors: [gradientColor.cgColor, gradientColor2.cgColor] as CFArray, locations: [0, 0.61])!
        let paint0_linear = CGGradient(colorsSpace: nil, colors: [gradientColor3.cgColor, gradientColor4.cgColor] as CFArray, locations: [0, 0.61])!

        //// Group 2
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Rectangle
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 812))
        rectanglePath.addClip()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 812))
        fillColor.setFill()
        rectangle2Path.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 812))
        context.saveGState()
        rectangle3Path.addClip()
        context.drawLinearGradient(paint0_linear,
            start: CGPoint(x: 187.5, y: 0),
            end: CGPoint(x: 187.5, y: 812),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: -101, y: 91, width: 220, height: 220))
        fillColor2.setFill()
        ovalPath.fill()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 711.2, y: 843.4))
        bezierPath.addLine(to: CGPoint(x: -251.64, y: 843.4))
        bezierPath.addLine(to: CGPoint(x: -132.51, y: 714.43))
        bezierPath.addLine(to: CGPoint(x: 87.58, y: 456.59))
        bezierPath.addLine(to: CGPoint(x: 102.41, y: 439.22))
        bezierPath.addLine(to: CGPoint(x: 301.51, y: 205.98))
        bezierPath.addLine(to: CGPoint(x: 439.27, y: 423.89))
        bezierPath.addLine(to: CGPoint(x: 442.87, y: 429.59))
        bezierPath.addLine(to: CGPoint(x: 618.13, y: 706.78))
        bezierPath.addLine(to: CGPoint(x: 711.2, y: 843.4))
        bezierPath.close()
        fillColor3.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        context.saveGState()
        context.setAlpha(0.1)

        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 439.27, y: 423.89))
        bezier2Path.addLine(to: CGPoint(x: 418.25, y: 460.78))
        bezier2Path.addLine(to: CGPoint(x: 371.11, y: 411.46))
        bezier2Path.addLine(to: CGPoint(x: 319.47, y: 460.78))
        bezier2Path.addLine(to: CGPoint(x: 290.28, y: 404.73))
        bezier2Path.addLine(to: CGPoint(x: 243.13, y: 460.78))
        bezier2Path.addLine(to: CGPoint(x: 229.66, y: 424.91))
        bezier2Path.addLine(to: CGPoint(x: 198.24, y: 460.78))
        bezier2Path.addLine(to: CGPoint(x: 142.11, y: 424.91))
        bezier2Path.addLine(to: CGPoint(x: 102.42, y: 439.22))
        bezier2Path.addLine(to: CGPoint(x: 301.51, y: 205.98))
        bezier2Path.addLine(to: CGPoint(x: 439.27, y: 423.89))
        bezier2Path.close()
        fillColor4.setFill()
        bezier2Path.fill()

        context.restoreGState()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 1241, y: 836.18))
        bezier3Path.addCurve(to: CGPoint(x: 1107.09, y: 855.77), controlPoint1: CGPoint(x: 1241, y: 853.19), controlPoint2: CGPoint(x: 1194.03, y: 857.06))
        bezier3Path.addCurve(to: CGPoint(x: 722.71, y: 844.15), controlPoint1: CGPoint(x: 1018.23, y: 854.45), controlPoint2: CGPoint(x: 887.6, y: 847.74))
        bezier3Path.addCurve(to: CGPoint(x: 521.29, y: 841.89), controlPoint1: CGPoint(x: 660.34, y: 842.8), controlPoint2: CGPoint(x: 593.06, y: 841.89))
        bezier3Path.addCurve(to: CGPoint(x: -378, y: 836.18), controlPoint1: CGPoint(x: 74.21, y: 841.89), controlPoint2: CGPoint(x: -378, y: 877.15))
        bezier3Path.addCurve(to: CGPoint(x: -321.25, y: 808.85), controlPoint1: CGPoint(x: -378, y: 826.53), controlPoint2: CGPoint(x: -357.88, y: 817.31))
        bezier3Path.addCurve(to: CGPoint(x: 344.88, y: 762.42), controlPoint1: CGPoint(x: -212.65, y: 783.75), controlPoint2: CGPoint(x: 41, y: 765.38))
        bezier3Path.addCurve(to: CGPoint(x: 386.65, y: 762.11), controlPoint1: CGPoint(x: 358.7, y: 762.28), controlPoint2: CGPoint(x: 372.63, y: 762.18))
        bezier3Path.addCurve(to: CGPoint(x: 431.5, y: 762), controlPoint1: CGPoint(x: 401.5, y: 762.03), controlPoint2: CGPoint(x: 416.45, y: 762))
        bezier3Path.addCurve(to: CGPoint(x: 769.92, y: 768.77), controlPoint1: CGPoint(x: 552.31, y: 762), controlPoint2: CGPoint(x: 666.95, y: 764.42))
        bezier3Path.addCurve(to: CGPoint(x: 770.89, y: 768.81), controlPoint1: CGPoint(x: 770.25, y: 768.79), controlPoint2: CGPoint(x: 770.56, y: 768.8))
        bezier3Path.addCurve(to: CGPoint(x: 795.45, y: 769.9), controlPoint1: CGPoint(x: 779.16, y: 769.16), controlPoint2: CGPoint(x: 787.34, y: 769.53))
        bezier3Path.addCurve(to: CGPoint(x: 821.71, y: 771.17), controlPoint1: CGPoint(x: 804.3, y: 770.31), controlPoint2: CGPoint(x: 813.05, y: 770.74))
        bezier3Path.addCurve(to: CGPoint(x: 827.04, y: 771.45), controlPoint1: CGPoint(x: 823.49, y: 771.26), controlPoint2: CGPoint(x: 825.28, y: 771.35))
        bezier3Path.addCurve(to: CGPoint(x: 830.88, y: 771.65), controlPoint1: CGPoint(x: 828.33, y: 771.51), controlPoint2: CGPoint(x: 829.61, y: 771.58))
        bezier3Path.addCurve(to: CGPoint(x: 837.86, y: 772.02), controlPoint1: CGPoint(x: 833.21, y: 771.76), controlPoint2: CGPoint(x: 835.55, y: 771.88))
        bezier3Path.addCurve(to: CGPoint(x: 838.1, y: 772.03), controlPoint1: CGPoint(x: 837.94, y: 772.01), controlPoint2: CGPoint(x: 838.02, y: 772.02))
        bezier3Path.addCurve(to: CGPoint(x: 850.76, y: 772.71), controlPoint1: CGPoint(x: 842.35, y: 772.25), controlPoint2: CGPoint(x: 846.57, y: 772.48))
        bezier3Path.addCurve(to: CGPoint(x: 852.08, y: 772.78), controlPoint1: CGPoint(x: 851.2, y: 772.74), controlPoint2: CGPoint(x: 851.64, y: 772.76))
        bezier3Path.addCurve(to: CGPoint(x: 1142.89, y: 800.76), controlPoint1: CGPoint(x: 973.87, y: 779.59), controlPoint2: CGPoint(x: 1074.51, y: 789.25))
        bezier3Path.addCurve(to: CGPoint(x: 1241, y: 836.18), controlPoint1: CGPoint(x: 1205.46, y: 811.29), controlPoint2: CGPoint(x: 1241, y: 823.35))
        bezier3Path.close()
        fillColor5.setFill()
        bezier3Path.fill()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 126.14, y: 710.62))
        bezier4Path.addLine(to: CGPoint(x: 153.51, y: 711))
        bezier4Path.addLine(to: CGPoint(x: 160.76, y: 712.59))
        bezier4Path.addLine(to: CGPoint(x: 161.48, y: 713.46))
        bezier4Path.addLine(to: CGPoint(x: 171.18, y: 723.55))
        bezier4Path.addLine(to: CGPoint(x: 180.57, y: 733.38))
        bezier4Path.addLine(to: CGPoint(x: 188.57, y: 739.91))
        bezier4Path.addLine(to: CGPoint(x: 200.56, y: 746.16))
        bezier4Path.addLine(to: CGPoint(x: 201.82, y: 747.78))
        bezier4Path.addLine(to: CGPoint(x: 202.67, y: 750.54))
        bezier4Path.addLine(to: CGPoint(x: 202.65, y: 761.45))
        bezier4Path.addLine(to: CGPoint(x: 199.72, y: 762.43))
        bezier4Path.addLine(to: CGPoint(x: 197.83, y: 772.72))
        bezier4Path.addLine(to: CGPoint(x: 194.66, y: 772.79))
        bezier4Path.addLine(to: CGPoint(x: 194.62, y: 770.84))
        bezier4Path.addLine(to: CGPoint(x: 193.34, y: 766.99))
        bezier4Path.addLine(to: CGPoint(x: 190.96, y: 764.05))
        bezier4Path.addLine(to: CGPoint(x: 187.41, y: 761.82))
        bezier4Path.addLine(to: CGPoint(x: 183.53, y: 761.12))
        bezier4Path.addLine(to: CGPoint(x: 177.13, y: 760.97))
        bezier4Path.addLine(to: CGPoint(x: 172.08, y: 762.19))
        bezier4Path.addLine(to: CGPoint(x: 168.53, y: 764.35))
        bezier4Path.addLine(to: CGPoint(x: 163.26, y: 770.38))
        bezier4Path.addLine(to: CGPoint(x: 158.86, y: 777.61))
        bezier4Path.addLine(to: CGPoint(x: 158.89, y: 779.13))
        bezier4Path.addLine(to: CGPoint(x: 126.77, y: 779.91))
        bezier4Path.addLine(to: CGPoint(x: 126.6, y: 745.17))
        bezier4Path.addLine(to: CGPoint(x: 126.14, y: 710.62))
        bezier4Path.close()
        fillColor6.setFill()
        bezier4Path.fill()


        //// Bezier 5 Drawing
        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: 158.89, y: 777.66))
        bezier5Path.addLine(to: CGPoint(x: 163.79, y: 769.63))
        bezier5Path.addLine(to: CGPoint(x: 167.76, y: 765.07))
        bezier5Path.addLine(to: CGPoint(x: 170.36, y: 762.93))
        bezier5Path.addLine(to: CGPoint(x: 174.04, y: 761.53))
        bezier5Path.addLine(to: CGPoint(x: 178.81, y: 760.99))
        bezier5Path.addLine(to: CGPoint(x: 185.66, y: 761.25))
        bezier5Path.addLine(to: CGPoint(x: 188.58, y: 762.49))
        bezier5Path.addLine(to: CGPoint(x: 190.87, y: 764.02))
        bezier5Path.addLine(to: CGPoint(x: 192.96, y: 766.3))
        bezier5Path.addLine(to: CGPoint(x: 194.26, y: 769.75))
        bezier5Path.addLine(to: CGPoint(x: 194.41, y: 770.78))
        bezier5Path.addLine(to: CGPoint(x: 193.65, y: 771.08))
        bezier5Path.addLine(to: CGPoint(x: 190.94, y: 767.14))
        bezier5Path.addLine(to: CGPoint(x: 186.84, y: 763.66))
        bezier5Path.addLine(to: CGPoint(x: 180.77, y: 761.79))
        bezier5Path.addLine(to: CGPoint(x: 175.51, y: 761.92))
        bezier5Path.addLine(to: CGPoint(x: 171.46, y: 763.24))
        bezier5Path.addLine(to: CGPoint(x: 167.18, y: 766.28))
        bezier5Path.addLine(to: CGPoint(x: 164.02, y: 770.48))
        bezier5Path.addLine(to: CGPoint(x: 162.19, y: 777.03))
        bezier5Path.addLine(to: CGPoint(x: 158.92, y: 778.98))
        bezier5Path.addLine(to: CGPoint(x: 158.89, y: 777.66))
        bezier5Path.close()
        fillColor5.setFill()
        bezier5Path.fill()


        //// Bezier 6 Drawing
        let bezier6Path = UIBezierPath()
        bezier6Path.move(to: CGPoint(x: 26.25, y: 767.87))
        bezier6Path.addLine(to: CGPoint(x: 27.32, y: 768.02))
        bezier6Path.addLine(to: CGPoint(x: 21.23, y: 780.7))
        bezier6Path.addLine(to: CGPoint(x: 16.69, y: 780.81))
        bezier6Path.addLine(to: CGPoint(x: 20.41, y: 774.36))
        bezier6Path.addLine(to: CGPoint(x: 22.46, y: 771.08))
        bezier6Path.addLine(to: CGPoint(x: 24.45, y: 768.86))
        bezier6Path.addLine(to: CGPoint(x: 26.25, y: 767.87))
        bezier6Path.close()
        fillColor5.setFill()
        bezier6Path.fill()


        //// Bezier 7 Drawing
        let bezier7Path = UIBezierPath()
        bezier7Path.move(to: CGPoint(x: 53.61, y: 776.58))
        bezier7Path.addLine(to: CGPoint(x: 54.92, y: 779.36))
        bezier7Path.addLine(to: CGPoint(x: 56.21, y: 782.48))
        bezier7Path.addLine(to: CGPoint(x: 54.1, y: 780.85))
        bezier7Path.addLine(to: CGPoint(x: 53.61, y: 776.58))
        bezier7Path.close()
        fillColor5.setFill()
        bezier7Path.fill()


        //// Bezier 8 Drawing
        let bezier8Path = UIBezierPath()
        bezier8Path.move(to: CGPoint(x: 199.79, y: 762.68))
        bezier8Path.addLine(to: CGPoint(x: 201.89, y: 762.87))
        bezier8Path.addLine(to: CGPoint(x: 203.38, y: 763.9))
        bezier8Path.addLine(to: CGPoint(x: 204.05, y: 765.38))
        bezier8Path.addLine(to: CGPoint(x: 203.76, y: 767.41))
        bezier8Path.addLine(to: CGPoint(x: 202.94, y: 769.78))
        bezier8Path.addLine(to: CGPoint(x: 202.1, y: 772))
        bezier8Path.addLine(to: CGPoint(x: 197.92, y: 772.81))
        bezier8Path.addLine(to: CGPoint(x: 199.79, y: 762.68))
        bezier8Path.close()
        fillColor5.setFill()
        bezier8Path.fill()


        //// Bezier 9 Drawing
        let bezier9Path = UIBezierPath()
        bezier9Path.move(to: CGPoint(x: 126.17, y: 709.64))
        bezier9Path.addLine(to: CGPoint(x: 170.87, y: 709.97))
        bezier9Path.addLine(to: CGPoint(x: 165.91, y: 711.37))
        bezier9Path.addLine(to: CGPoint(x: 160.97, y: 712.65))
        bezier9Path.addLine(to: CGPoint(x: 157.59, y: 711.88))
        bezier9Path.addLine(to: CGPoint(x: 154.21, y: 711.1))
        bezier9Path.addLine(to: CGPoint(x: 126.19, y: 710.59))
        bezier9Path.addLine(to: CGPoint(x: 126.17, y: 709.64))
        bezier9Path.close()
        fillColor5.setFill()
        bezier9Path.fill()


        //// Bezier 10 Drawing
        let bezier10Path = UIBezierPath()
        bezier10Path.move(to: CGPoint(x: -50.4, y: 708.61))
        bezier10Path.addLine(to: CGPoint(x: -51.38, y: 688.68))
        bezier10Path.addLine(to: CGPoint(x: -51.34, y: 683.79))
        bezier10Path.addLine(to: CGPoint(x: -50.75, y: 681.42))
        bezier10Path.addLine(to: CGPoint(x: -49.56, y: 680.26))
        bezier10Path.addLine(to: CGPoint(x: -46.71, y: 679.92))
        bezier10Path.addLine(to: CGPoint(x: -42.03, y: 679.65))
        bezier10Path.addLine(to: CGPoint(x: -16.76, y: 678.67))
        bezier10Path.addLine(to: CGPoint(x: 41.83, y: 677.1))
        bezier10Path.addLine(to: CGPoint(x: 97.99, y: 675.74))
        bezier10Path.addLine(to: CGPoint(x: 154.3, y: 674.16))
        bezier10Path.addLine(to: CGPoint(x: 169.36, y: 674))
        bezier10Path.addLine(to: CGPoint(x: 177.43, y: 680.59))
        bezier10Path.addLine(to: CGPoint(x: 191.39, y: 694.52))
        bezier10Path.addLine(to: CGPoint(x: 193.66, y: 697.77))
        bezier10Path.addLine(to: CGPoint(x: 193.18, y: 699.46))
        bezier10Path.addLine(to: CGPoint(x: 189.84, y: 703.7))
        bezier10Path.addLine(to: CGPoint(x: 183.3, y: 709.3))
        bezier10Path.addLine(to: CGPoint(x: 155.1, y: 709.98))
        bezier10Path.addLine(to: CGPoint(x: 126.18, y: 709.98))
        bezier10Path.addLine(to: CGPoint(x: 126.75, y: 781.72))
        bezier10Path.addLine(to: CGPoint(x: 56.3, y: 782.42))
        bezier10Path.addLine(to: CGPoint(x: 53.92, y: 777.03))
        bezier10Path.addLine(to: CGPoint(x: 49.45, y: 769.23))
        bezier10Path.addLine(to: CGPoint(x: 47.41, y: 767.93))
        bezier10Path.addLine(to: CGPoint(x: 25.95, y: 767.93))
        bezier10Path.addLine(to: CGPoint(x: 24.48, y: 768.76))
        bezier10Path.addLine(to: CGPoint(x: 22.11, y: 771.45))
        bezier10Path.addLine(to: CGPoint(x: 18.24, y: 777.9))
        bezier10Path.addLine(to: CGPoint(x: 15.36, y: 782.62))
        bezier10Path.addLine(to: CGPoint(x: -13.39, y: 781.86))
        bezier10Path.addLine(to: CGPoint(x: -41.11, y: 780.87))
        bezier10Path.addLine(to: CGPoint(x: -42.94, y: 779.18))
        bezier10Path.addLine(to: CGPoint(x: -45.34, y: 775.62))
        bezier10Path.addLine(to: CGPoint(x: -47.78, y: 772.75))
        bezier10Path.addLine(to: CGPoint(x: -48.16, y: 763.07))
        bezier10Path.addLine(to: CGPoint(x: -48.7, y: 739.74))
        bezier10Path.addLine(to: CGPoint(x: -50.4, y: 708.61))
        bezier10Path.close()
        fillColor6.setFill()
        bezier10Path.fill()


        //// Bezier 11 Drawing
        let bezier11Path = UIBezierPath()
        bezier11Path.move(to: CGPoint(x: 147.48, y: 682.85))
        bezier11Path.addLine(to: CGPoint(x: 147.28, y: 695.01))
        strokeColor.setStroke()
        bezier11Path.lineWidth = 1
        bezier11Path.miterLimit = 4
        bezier11Path.lineCapStyle = .square
        bezier11Path.stroke()


        //// Bezier 12 Drawing
        let bezier12Path = UIBezierPath()
        bezier12Path.move(to: CGPoint(x: 149.49, y: 682.8))
        bezier12Path.addLine(to: CGPoint(x: 149.28, y: 694.96))
        strokeColor.setStroke()
        bezier12Path.lineWidth = 1
        bezier12Path.miterLimit = 4
        bezier12Path.lineCapStyle = .square
        bezier12Path.stroke()


        //// Bezier 13 Drawing
        let bezier13Path = UIBezierPath()
        bezier13Path.move(to: CGPoint(x: 132.13, y: 683.1))
        bezier13Path.addCurve(to: CGPoint(x: 166.84, y: 682.26), controlPoint1: CGPoint(x: 143.7, y: 682.82), controlPoint2: CGPoint(x: 155.27, y: 682.54))
        bezier13Path.addCurve(to: CGPoint(x: 171.36, y: 686.6), controlPoint1: CGPoint(x: 166.96, y: 682.25), controlPoint2: CGPoint(x: 168.47, y: 683.7))
        bezier13Path.addCurve(to: CGPoint(x: 174.61, y: 690.23), controlPoint1: CGPoint(x: 173.36, y: 688.63), controlPoint2: CGPoint(x: 174.44, y: 689.83))
        bezier13Path.addCurve(to: CGPoint(x: 174.9, y: 692.37), controlPoint1: CGPoint(x: 174.86, y: 690.83), controlPoint2: CGPoint(x: 175.08, y: 691.22))
        bezier13Path.addCurve(to: CGPoint(x: 172.52, y: 694.46), controlPoint1: CGPoint(x: 174.72, y: 693.55), controlPoint2: CGPoint(x: 173.71, y: 694.43))
        bezier13Path.addLine(to: CGPoint(x: 132.2, y: 695.44))
        bezier13Path.addCurve(to: CGPoint(x: 129.59, y: 692.94), controlPoint1: CGPoint(x: 130.79, y: 695.48), controlPoint2: CGPoint(x: 129.62, y: 694.35))
        bezier13Path.addCurve(to: CGPoint(x: 129.59, y: 692.86), controlPoint1: CGPoint(x: 129.59, y: 692.91), controlPoint2: CGPoint(x: 129.59, y: 692.89))
        bezier13Path.addLine(to: CGPoint(x: 129.63, y: 685.65))
        bezier13Path.addCurve(to: CGPoint(x: 132.13, y: 683.1), controlPoint1: CGPoint(x: 129.64, y: 684.26), controlPoint2: CGPoint(x: 130.75, y: 683.13))
        bezier13Path.close()
        strokeColor.setStroke()
        bezier13Path.lineWidth = 1
        bezier13Path.miterLimit = 4
        bezier13Path.stroke()


        //// Bezier 14 Drawing
        let bezier14Path = UIBezierPath()
        bezier14Path.move(to: CGPoint(x: 131.91, y: 681.58))
        bezier14Path.addLine(to: CGPoint(x: 166.52, y: 680.74))
        bezier14Path.addCurve(to: CGPoint(x: 167.49, y: 681.11), controlPoint1: CGPoint(x: 166.88, y: 680.73), controlPoint2: CGPoint(x: 167.23, y: 680.86))
        bezier14Path.addLine(to: CGPoint(x: 172.4, y: 685.91))
        bezier14Path.addCurve(to: CGPoint(x: 172.49, y: 686), controlPoint1: CGPoint(x: 172.43, y: 685.94), controlPoint2: CGPoint(x: 172.46, y: 685.97))
        bezier14Path.addCurve(to: CGPoint(x: 176.2, y: 690.28), controlPoint1: CGPoint(x: 174.4, y: 687.73), controlPoint2: CGPoint(x: 175.63, y: 689.16))
        bezier14Path.addCurve(to: CGPoint(x: 174.48, y: 695.56), controlPoint1: CGPoint(x: 177.17, y: 692.21), controlPoint2: CGPoint(x: 176.41, y: 694.57))
        bezier14Path.addCurve(to: CGPoint(x: 172.8, y: 695.98), controlPoint1: CGPoint(x: 173.96, y: 695.82), controlPoint2: CGPoint(x: 173.38, y: 695.97))
        bezier14Path.addLine(to: CGPoint(x: 132.08, y: 696.97))
        bezier14Path.addCurve(to: CGPoint(x: 128.09, y: 693.16), controlPoint1: CGPoint(x: 129.93, y: 697.02), controlPoint2: CGPoint(x: 128.14, y: 695.32))
        bezier14Path.addCurve(to: CGPoint(x: 128.09, y: 693.06), controlPoint1: CGPoint(x: 128.09, y: 693.12), controlPoint2: CGPoint(x: 128.09, y: 693.09))
        bezier14Path.addLine(to: CGPoint(x: 128.1, y: 685.48))
        bezier14Path.addCurve(to: CGPoint(x: 131.91, y: 681.58), controlPoint1: CGPoint(x: 128.11, y: 683.36), controlPoint2: CGPoint(x: 129.8, y: 681.63))
        bezier14Path.close()
        strokeColor.setStroke()
        bezier14Path.lineWidth = 1
        bezier14Path.miterLimit = 4
        bezier14Path.stroke()


        //// Bezier 15 Drawing
        let bezier15Path = UIBezierPath()
        bezier15Path.move(to: CGPoint(x: -50.77, y: 702.06))
        bezier15Path.addLine(to: CGPoint(x: 192.82, y: 696.15))
        bezier15Path.addLine(to: CGPoint(x: 193.96, y: 697.94))
        bezier15Path.addCurve(to: CGPoint(x: 193.48, y: 699.31), controlPoint1: CGPoint(x: 193.86, y: 698.49), controlPoint2: CGPoint(x: 193.7, y: 698.94))
        bezier15Path.addCurve(to: CGPoint(x: 192.31, y: 700.67), controlPoint1: CGPoint(x: 193.26, y: 699.68), controlPoint2: CGPoint(x: 192.87, y: 700.13))
        bezier15Path.addCurve(to: CGPoint(x: 189.98, y: 703.38), controlPoint1: CGPoint(x: 191.38, y: 701.81), controlPoint2: CGPoint(x: 190.6, y: 702.71))
        bezier15Path.addCurve(to: CGPoint(x: 187.08, y: 706.32), controlPoint1: CGPoint(x: 189.36, y: 704.05), controlPoint2: CGPoint(x: 188.39, y: 705.03))
        bezier15Path.addCurve(to: CGPoint(x: 184.99, y: 708.39), controlPoint1: CGPoint(x: 186.19, y: 707.31), controlPoint2: CGPoint(x: 185.49, y: 708))
        bezier15Path.addCurve(to: CGPoint(x: 183.22, y: 709.3), controlPoint1: CGPoint(x: 184.49, y: 708.78), controlPoint2: CGPoint(x: 183.9, y: 709.08))
        bezier15Path.addCurve(to: CGPoint(x: 180, y: 709.77), controlPoint1: CGPoint(x: 182.85, y: 709.51), controlPoint2: CGPoint(x: 181.77, y: 709.67))
        bezier15Path.addCurve(to: CGPoint(x: 172.1, y: 709.97), controlPoint1: CGPoint(x: 178.23, y: 709.88), controlPoint2: CGPoint(x: 175.6, y: 709.94))
        bezier15Path.addLine(to: CGPoint(x: 126.19, y: 709.81))
        bezier15Path.addLine(to: CGPoint(x: 126.64, y: 748.54))
        bezier15Path.addLine(to: CGPoint(x: 113.48, y: 748.86))
        bezier15Path.addLine(to: CGPoint(x: 113, y: 728.25))
        bezier15Path.addCurve(to: CGPoint(x: 114.59, y: 727.15), controlPoint1: CGPoint(x: 113.81, y: 727.86), controlPoint2: CGPoint(x: 114.34, y: 727.5))
        bezier15Path.addCurve(to: CGPoint(x: 115.22, y: 725.18), controlPoint1: CGPoint(x: 114.84, y: 726.8), controlPoint2: CGPoint(x: 115.05, y: 726.14))
        bezier15Path.addLine(to: CGPoint(x: 114.67, y: 701.22))
        bezier15Path.addCurve(to: CGPoint(x: 113.39, y: 699.73), controlPoint1: CGPoint(x: 114.08, y: 700.54), controlPoint2: CGPoint(x: 113.66, y: 700.04))
        bezier15Path.addCurve(to: CGPoint(x: 111.89, y: 699.05), controlPoint1: CGPoint(x: 113.13, y: 699.42), controlPoint2: CGPoint(x: 112.63, y: 699.2))
        bezier15Path.addLine(to: CGPoint(x: 47.09, y: 700.62))
        bezier15Path.addCurve(to: CGPoint(x: 45.41, y: 701.38), controlPoint1: CGPoint(x: 46.25, y: 700.8), controlPoint2: CGPoint(x: 45.69, y: 701.06))
        bezier15Path.addCurve(to: CGPoint(x: 44.33, y: 702.93), controlPoint1: CGPoint(x: 45.14, y: 701.71), controlPoint2: CGPoint(x: 44.78, y: 702.22))
        bezier15Path.addCurve(to: CGPoint(x: 44.89, y: 726.88), controlPoint1: CGPoint(x: 44.41, y: 713.51), controlPoint2: CGPoint(x: 44.59, y: 721.49))
        bezier15Path.addCurve(to: CGPoint(x: 46.06, y: 729.16), controlPoint1: CGPoint(x: 44.91, y: 727.35), controlPoint2: CGPoint(x: 45.18, y: 728.38))
        bezier15Path.addCurve(to: CGPoint(x: 47.77, y: 729.93), controlPoint1: CGPoint(x: 46.33, y: 729.4), controlPoint2: CGPoint(x: 46.9, y: 729.66))
        bezier15Path.addLine(to: CGPoint(x: 47.93, y: 750.45))
        bezier15Path.addLine(to: CGPoint(x: -48.41, y: 752.79))
        bezier15Path.addLine(to: CGPoint(x: -50.77, y: 702.06))
        bezier15Path.close()
        bezier15Path.usesEvenOddFillRule = true
        fillColor2.setFill()
        bezier15Path.fill()


        //// Rectangle 4 Drawing
        context.saveGState()
        context.translateBy(x: 80.35, y: 737.96)
        context.rotate(by: -1.4 * CGFloat.pi/180)

        let rectangle4Path = UIBezierPath(rect: CGRect(x: -33.65, y: -10.08, width: 67.3, height: 20.15))
        fillColor2.setFill()
        rectangle4Path.fill()

        context.restoreGState()


        //// Bezier 16 Drawing
        let bezier16Path = UIBezierPath()
        bezier16Path.move(to: CGPoint(x: -49.58, y: 680.38))
        bezier16Path.addCurve(to: CGPoint(x: 70.77, y: 676.45), controlPoint1: CGPoint(x: -47.06, y: 679.03), controlPoint2: CGPoint(x: 13.39, y: 677.96))
        bezier16Path.addCurve(to: CGPoint(x: 169.41, y: 674.05), controlPoint1: CGPoint(x: 121.25, y: 675.12), controlPoint2: CGPoint(x: 168.41, y: 673.61))
        bezier16Path.addCurve(to: CGPoint(x: 193.96, y: 697.94), controlPoint1: CGPoint(x: 172.66, y: 675.5), controlPoint2: CGPoint(x: 193.92, y: 696.17))
        bezier16Path.addCurve(to: CGPoint(x: 183.33, y: 709.37), controlPoint1: CGPoint(x: 194, y: 699.71), controlPoint2: CGPoint(x: 185.6, y: 708.37))
        bezier16Path.addCurve(to: CGPoint(x: 126.19, y: 709.82), controlPoint1: CGPoint(x: 181.82, y: 710.03), controlPoint2: CGPoint(x: 162.77, y: 710.18))
        bezier16Path.addLine(to: CGPoint(x: 126.84, y: 781.74))
        bezier16Path.addCurve(to: CGPoint(x: 56.33, y: 782.48), controlPoint1: CGPoint(x: 88.39, y: 782.03), controlPoint2: CGPoint(x: 64.89, y: 782.28))
        bezier16Path.addCurve(to: CGPoint(x: 48.79, y: 768.67), controlPoint1: CGPoint(x: 54.89, y: 780.03), controlPoint2: CGPoint(x: 51.76, y: 770.44))
        bezier16Path.addCurve(to: CGPoint(x: 26.86, y: 767.87), controlPoint1: CGPoint(x: 43.38, y: 765.45), controlPoint2: CGPoint(x: 27.13, y: 767.87))
        bezier16Path.addCurve(to: CGPoint(x: 15.3, y: 782.56), controlPoint1: CGPoint(x: 22.4, y: 767.86), controlPoint2: CGPoint(x: 18.93, y: 778.47))
        bezier16Path.addCurve(to: CGPoint(x: -41.16, y: 780.82), controlPoint1: CGPoint(x: -4, y: 782.28), controlPoint2: CGPoint(x: -22.82, y: 781.71))
        bezier16Path.addCurve(to: CGPoint(x: -47.81, y: 772.79), controlPoint1: CGPoint(x: -43.97, y: 778.63), controlPoint2: CGPoint(x: -44.01, y: 776.84))
        bezier16Path.addCurve(to: CGPoint(x: -51.27, y: 691.38), controlPoint1: CGPoint(x: -48.91, y: 725.45), controlPoint2: CGPoint(x: -51.04, y: 699.97))
        bezier16Path.addCurve(to: CGPoint(x: -49.58, y: 680.38), controlPoint1: CGPoint(x: -51.39, y: 686.75), controlPoint2: CGPoint(x: -52.09, y: 681.73))
        bezier16Path.close()
        strokeColor.setStroke()
        bezier16Path.lineWidth = 1
        bezier16Path.miterLimit = 4
        bezier16Path.stroke()


        //// Bezier 17 Drawing
        let bezier17Path = UIBezierPath()
        bezier17Path.move(to: CGPoint(x: 160.96, y: 712.71))
        bezier17Path.addLine(to: CGPoint(x: 171.27, y: 709.98))
        strokeColor.setStroke()
        bezier17Path.lineWidth = 1
        bezier17Path.miterLimit = 4
        bezier17Path.lineCapStyle = .square
        bezier17Path.stroke()


        //// Bezier 18 Drawing
        let bezier18Path = UIBezierPath()
        bezier18Path.move(to: CGPoint(x: 199.66, y: 762.58))
        bezier18Path.addCurve(to: CGPoint(x: 202.56, y: 763.18), controlPoint1: CGPoint(x: 201, y: 762.57), controlPoint2: CGPoint(x: 201.97, y: 762.77))
        bezier18Path.addCurve(to: CGPoint(x: 204.07, y: 765.53), controlPoint1: CGPoint(x: 203.45, y: 763.78), controlPoint2: CGPoint(x: 203.89, y: 764.6))
        bezier18Path.addCurve(to: CGPoint(x: 203.08, y: 769.48), controlPoint1: CGPoint(x: 204.19, y: 766.15), controlPoint2: CGPoint(x: 203.86, y: 767.46))
        bezier18Path.addCurve(to: CGPoint(x: 202.1, y: 771.87), controlPoint1: CGPoint(x: 202.59, y: 770.66), controlPoint2: CGPoint(x: 202.27, y: 771.46))
        bezier18Path.addCurve(to: CGPoint(x: 197.86, y: 772.82), controlPoint1: CGPoint(x: 201.94, y: 772.28), controlPoint2: CGPoint(x: 200.53, y: 772.6))
        bezier18Path.addLine(to: CGPoint(x: 199.66, y: 762.58))
        bezier18Path.close()
        strokeColor.setStroke()
        bezier18Path.lineWidth = 1
        bezier18Path.miterLimit = 4
        bezier18Path.stroke()


        //// Bezier 19 Drawing
        let bezier19Path = UIBezierPath()
        bezier19Path.move(to: CGPoint(x: 193.41, y: 771.21))
        bezier19Path.addLine(to: CGPoint(x: 194.44, y: 770.81))
        strokeColor.setStroke()
        bezier19Path.lineWidth = 1
        bezier19Path.miterLimit = 4
        bezier19Path.lineCapStyle = .square
        bezier19Path.stroke()


        //// Bezier 20 Drawing
        let bezier20Path = UIBezierPath()
        bezier20Path.move(to: CGPoint(x: 16.71, y: 780.84))
        bezier20Path.addLine(to: CGPoint(x: 21.45, y: 780.73))
        strokeColor.setStroke()
        bezier20Path.lineWidth = 1
        bezier20Path.miterLimit = 4
        bezier20Path.lineCapStyle = .square
        bezier20Path.stroke()


        //// Bezier 21 Drawing
        let bezier21Path = UIBezierPath()
        bezier21Path.move(to: CGPoint(x: 126.55, y: 738.48))
        bezier21Path.addLine(to: CGPoint(x: 184.87, y: 737.07))
        bezier21Path.addLine(to: CGPoint(x: 192.48, y: 742.17))
        bezier21Path.addCurve(to: CGPoint(x: 199.18, y: 745.4), controlPoint1: CGPoint(x: 195.57, y: 743.53), controlPoint2: CGPoint(x: 197.81, y: 744.61))
        bezier21Path.addCurve(to: CGPoint(x: 201.44, y: 747.24), controlPoint1: CGPoint(x: 200.55, y: 746.19), controlPoint2: CGPoint(x: 201.31, y: 746.8))
        bezier21Path.addLine(to: CGPoint(x: 126.65, y: 749.05))
        bezier21Path.addLine(to: CGPoint(x: 126.55, y: 738.48))
        bezier21Path.close()
        bezier21Path.usesEvenOddFillRule = true
        fillColor2.setFill()
        bezier21Path.fill()


        //// Bezier 22 Drawing
        let bezier22Path = UIBezierPath()
        bezier22Path.move(to: CGPoint(x: 126.35, y: 710.68))
        bezier22Path.addCurve(to: CGPoint(x: 153.66, y: 711.15), controlPoint1: CGPoint(x: 142.84, y: 710.89), controlPoint2: CGPoint(x: 151.94, y: 711.05))
        bezier22Path.addCurve(to: CGPoint(x: 160.7, y: 712.72), controlPoint1: CGPoint(x: 155.37, y: 711.25), controlPoint2: CGPoint(x: 157.72, y: 711.78))
        bezier22Path.addLine(to: CGPoint(x: 179.93, y: 732.66))
        bezier22Path.addCurve(to: CGPoint(x: 189.82, y: 740.49), controlPoint1: CGPoint(x: 183.65, y: 736.19), controlPoint2: CGPoint(x: 186.95, y: 738.8))
        bezier22Path.addCurve(to: CGPoint(x: 198.57, y: 745.02), controlPoint1: CGPoint(x: 192.69, y: 742.18), controlPoint2: CGPoint(x: 195.61, y: 743.69))
        bezier22Path.addCurve(to: CGPoint(x: 202.22, y: 748.62), controlPoint1: CGPoint(x: 200.46, y: 745.9), controlPoint2: CGPoint(x: 201.68, y: 747.1))
        bezier22Path.addCurve(to: CGPoint(x: 202.52, y: 761.57), controlPoint1: CGPoint(x: 202.76, y: 750.14), controlPoint2: CGPoint(x: 202.86, y: 754.46))
        bezier22Path.addLine(to: CGPoint(x: 199.66, y: 762.58))
        bezier22Path.addLine(to: CGPoint(x: 197.86, y: 772.82))
        bezier22Path.addLine(to: CGPoint(x: 194.56, y: 772.9))
        bezier22Path.addCurve(to: CGPoint(x: 193.72, y: 767.86), controlPoint1: CGPoint(x: 194.6, y: 771.08), controlPoint2: CGPoint(x: 194.32, y: 769.4))
        bezier22Path.addCurve(to: CGPoint(x: 183.32, y: 761.12), controlPoint1: CGPoint(x: 192.81, y: 765.56), controlPoint2: CGPoint(x: 189.47, y: 761.29))
        bezier22Path.addCurve(to: CGPoint(x: 171.85, y: 762.32), controlPoint1: CGPoint(x: 180.77, y: 761.05), controlPoint2: CGPoint(x: 175.91, y: 760.61))
        bezier22Path.addCurve(to: CGPoint(x: 165.34, y: 767.8), controlPoint1: CGPoint(x: 169.38, y: 763.36), controlPoint2: CGPoint(x: 168.61, y: 764))
        bezier22Path.addCurve(to: CGPoint(x: 159.92, y: 776.17), controlPoint1: CGPoint(x: 163.16, y: 770.32), controlPoint2: CGPoint(x: 161.36, y: 773.12))
        bezier22Path.addLine(to: CGPoint(x: 158.96, y: 777.73))
        bezier22Path.addLine(to: CGPoint(x: 126.87, y: 778.51))
        bezier22Path.addLine(to: CGPoint(x: 126.35, y: 710.68))
        bezier22Path.close()
        strokeColor.setStroke()
        bezier22Path.lineWidth = 1
        bezier22Path.miterLimit = 4
        bezier22Path.stroke()


        //// Bezier 23 Drawing
        let bezier23Path = UIBezierPath()
        bezier23Path.move(to: CGPoint(x: 126.36, y: 714.76))
        bezier23Path.addCurve(to: CGPoint(x: 155.77, y: 715.14), controlPoint1: CGPoint(x: 144.66, y: 714.94), controlPoint2: CGPoint(x: 154.46, y: 715.06))
        bezier23Path.addCurve(to: CGPoint(x: 159.47, y: 716.72), controlPoint1: CGPoint(x: 157.08, y: 715.22), controlPoint2: CGPoint(x: 158.31, y: 715.75))
        bezier23Path.addCurve(to: CGPoint(x: 173.84, y: 731.24), controlPoint1: CGPoint(x: 166.93, y: 723.98), controlPoint2: CGPoint(x: 171.72, y: 728.82))
        bezier23Path.addCurve(to: CGPoint(x: 179.38, y: 739.36), controlPoint1: CGPoint(x: 177.04, y: 734.87), controlPoint2: CGPoint(x: 177.78, y: 735.57))
        bezier23Path.addCurve(to: CGPoint(x: 180.87, y: 747.81), controlPoint1: CGPoint(x: 180.99, y: 743.16), controlPoint2: CGPoint(x: 180.8, y: 744.88))
        bezier23Path.addCurve(to: CGPoint(x: 179.79, y: 756.73), controlPoint1: CGPoint(x: 180.94, y: 750.74), controlPoint2: CGPoint(x: 179.79, y: 756.73))
        bezier23Path.addCurve(to: CGPoint(x: 171.72, y: 757.98), controlPoint1: CGPoint(x: 179.79, y: 756.73), controlPoint2: CGPoint(x: 175.42, y: 756.73))
        bezier23Path.addCurve(to: CGPoint(x: 164.69, y: 761.84), controlPoint1: CGPoint(x: 168.01, y: 759.24), controlPoint2: CGPoint(x: 167.53, y: 759.23))
        bezier23Path.addCurve(to: CGPoint(x: 160.18, y: 768.63), controlPoint1: CGPoint(x: 161.85, y: 764.46), controlPoint2: CGPoint(x: 161.41, y: 766.71))
        bezier23Path.addCurve(to: CGPoint(x: 156.65, y: 775.07), controlPoint1: CGPoint(x: 158.94, y: 770.56), controlPoint2: CGPoint(x: 157.14, y: 774.35))
        bezier23Path.addCurve(to: CGPoint(x: 126.8, y: 775.41), controlPoint1: CGPoint(x: 156.32, y: 775.56), controlPoint2: CGPoint(x: 146.37, y: 775.67))
        bezier23Path.addLine(to: CGPoint(x: 126.36, y: 714.76))
        bezier23Path.close()
        strokeColor.setStroke()
        bezier23Path.lineWidth = 1
        bezier23Path.miterLimit = 4
        bezier23Path.stroke()


        //// Bezier 24 Drawing
        let bezier24Path = UIBezierPath()
        bezier24Path.move(to: CGPoint(x: 164.21, y: 723.39))
        bezier24Path.addCurve(to: CGPoint(x: 171.79, y: 732.42), controlPoint1: CGPoint(x: 168.89, y: 728.77), controlPoint2: CGPoint(x: 171.41, y: 731.77))
        bezier24Path.addCurve(to: CGPoint(x: 170.79, y: 734.46), controlPoint1: CGPoint(x: 172.37, y: 733.38), controlPoint2: CGPoint(x: 171.84, y: 734.44))
        bezier24Path.addCurve(to: CGPoint(x: 140.43, y: 735.2), controlPoint1: CGPoint(x: 169.75, y: 734.49), controlPoint2: CGPoint(x: 142.67, y: 735.28))
        bezier24Path.addCurve(to: CGPoint(x: 137.85, y: 733.24), controlPoint1: CGPoint(x: 138.19, y: 735.11), controlPoint2: CGPoint(x: 138.17, y: 734.28))
        bezier24Path.addCurve(to: CGPoint(x: 134.59, y: 719.07), controlPoint1: CGPoint(x: 137.52, y: 732.2), controlPoint2: CGPoint(x: 134.72, y: 720.23))
        bezier24Path.addCurve(to: CGPoint(x: 136.04, y: 716.82), controlPoint1: CGPoint(x: 134.47, y: 717.92), controlPoint2: CGPoint(x: 134.54, y: 716.91))
        bezier24Path.addCurve(to: CGPoint(x: 155.77, y: 716.89), controlPoint1: CGPoint(x: 137.54, y: 716.73), controlPoint2: CGPoint(x: 152.27, y: 716.48))
        bezier24Path.addCurve(to: CGPoint(x: 164.21, y: 723.39), controlPoint1: CGPoint(x: 158.1, y: 717.16), controlPoint2: CGPoint(x: 160.91, y: 719.33))
        bezier24Path.close()
        strokeColor.setStroke()
        bezier24Path.lineWidth = 1
        bezier24Path.miterLimit = 4
        bezier24Path.stroke()


        //// Bezier 25 Drawing
        let bezier25Path = UIBezierPath()
        bezier25Path.move(to: CGPoint(x: 158.87, y: 778.92))
        bezier25Path.addLine(to: CGPoint(x: 158.97, y: 777.82))
        strokeColor.setStroke()
        bezier25Path.lineWidth = 1
        bezier25Path.miterLimit = 4
        bezier25Path.lineCapStyle = .square
        bezier25Path.stroke()


        //// Bezier 26 Drawing
        let bezier26Path = UIBezierPath()
        bezier26Path.move(to: CGPoint(x: 126.87, y: 779.88))
        bezier26Path.addLine(to: CGPoint(x: 158.99, y: 779.1))
        bezier26Path.addLine(to: CGPoint(x: 162.19, y: 777.07))
        strokeColor.setStroke()
        bezier26Path.lineWidth = 1
        bezier26Path.miterLimit = 4
        bezier26Path.lineCapStyle = .square
        bezier26Path.stroke()


        //// Bezier 27 Drawing
        let bezier27Path = UIBezierPath()
        bezier27Path.move(to: CGPoint(x: 131.39, y: 714.99))
        bezier27Path.addCurve(to: CGPoint(x: 133.35, y: 745.54), controlPoint1: CGPoint(x: 132.47, y: 725.31), controlPoint2: CGPoint(x: 133.12, y: 735.5))
        bezier27Path.addCurve(to: CGPoint(x: 132.79, y: 775.4), controlPoint1: CGPoint(x: 133.59, y: 755.58), controlPoint2: CGPoint(x: 133.4, y: 765.53))
        strokeColor.setStroke()
        bezier27Path.lineWidth = 1
        bezier27Path.miterLimit = 4
        bezier27Path.lineCapStyle = .square
        bezier27Path.stroke()


        //// Bezier 28 Drawing
        let bezier28Path = UIBezierPath()
        bezier28Path.move(to: CGPoint(x: 161.4, y: 713.47))
        bezier28Path.addCurve(to: CGPoint(x: 160.67, y: 714.7), controlPoint1: CGPoint(x: 161.04, y: 713.77), controlPoint2: CGPoint(x: 160.8, y: 714.18))
        bezier28Path.addCurve(to: CGPoint(x: 178.37, y: 732.95), controlPoint1: CGPoint(x: 160.68, y: 715.21), controlPoint2: CGPoint(x: 177.83, y: 732.45))
        bezier28Path.addCurve(to: CGPoint(x: 180.55, y: 733.24), controlPoint1: CGPoint(x: 178.74, y: 733.29), controlPoint2: CGPoint(x: 179.46, y: 733.39))
        bezier28Path.addLine(to: CGPoint(x: 171.62, y: 724.04))
        bezier28Path.addLine(to: CGPoint(x: 161.4, y: 713.47))
        bezier28Path.close()
        strokeColor.setStroke()
        bezier28Path.lineWidth = 1
        bezier28Path.miterLimit = 4
        bezier28Path.lineCapStyle = .square
        bezier28Path.stroke()


        //// Bezier 29 Drawing
        let bezier29Path = UIBezierPath()
        bezier29Path.move(to: CGPoint(x: 56.25, y: 782.45))
        bezier29Path.addLine(to: CGPoint(x: 54.06, y: 780.88))
        strokeColor.setStroke()
        bezier29Path.lineWidth = 1
        bezier29Path.miterLimit = 4
        bezier29Path.lineCapStyle = .round
        bezier29Path.stroke()


        //// Oval 2 Drawing
        context.saveGState()
        context.translateBy(x: 37.7, y: 780.73)
        context.rotate(by: -4.85 * CGFloat.pi/180)

        let oval2Path = UIBezierPath(ovalIn: CGRect(x: -9.75, y: -9.7, width: 19.5, height: 19.4))
        fillColor6.setFill()
        oval2Path.fill()

        context.restoreGState()


        //// Bezier 30 Drawing
        let bezier30Path = UIBezierPath()
        bezier30Path.move(to: CGPoint(x: 37.42, y: 767.08))
        bezier30Path.addCurve(to: CGPoint(x: 45.84, y: 767.71), controlPoint1: CGPoint(x: 40.48, y: 767.01), controlPoint2: CGPoint(x: 43.37, y: 767.07))
        bezier30Path.addCurve(to: CGPoint(x: 47.37, y: 768.15), controlPoint1: CGPoint(x: 46.32, y: 767.84), controlPoint2: CGPoint(x: 46.77, y: 767.87))
        bezier30Path.addCurve(to: CGPoint(x: 49.02, y: 768.97), controlPoint1: CGPoint(x: 48, y: 768.44), controlPoint2: CGPoint(x: 48.78, y: 768.98))
        bezier30Path.addCurve(to: CGPoint(x: 54.04, y: 780.27), controlPoint1: CGPoint(x: 51.06, y: 771.34), controlPoint2: CGPoint(x: 53.93, y: 775.55))
        bezier30Path.addCurve(to: CGPoint(x: 38.11, y: 797.04), controlPoint1: CGPoint(x: 54.25, y: 789.31), controlPoint2: CGPoint(x: 47.12, y: 796.82))
        bezier30Path.addCurve(to: CGPoint(x: 21.43, y: 781.06), controlPoint1: CGPoint(x: 29.11, y: 797.25), controlPoint2: CGPoint(x: 21.64, y: 790.1))
        bezier30Path.addCurve(to: CGPoint(x: 27.63, y: 767.79), controlPoint1: CGPoint(x: 21.3, y: 775.64), controlPoint2: CGPoint(x: 22.66, y: 772.14))
        bezier30Path.addCurve(to: CGPoint(x: 37.42, y: 767.08), controlPoint1: CGPoint(x: 28.7, y: 767.77), controlPoint2: CGPoint(x: 33.81, y: 767.17))
        bezier30Path.close()
        bezier30Path.move(to: CGPoint(x: 37.51, y: 770.89))
        bezier30Path.addCurve(to: CGPoint(x: 28, y: 780.9), controlPoint1: CGPoint(x: 32.13, y: 771.02), controlPoint2: CGPoint(x: 27.87, y: 775.5))
        bezier30Path.addCurve(to: CGPoint(x: 37.96, y: 790.44), controlPoint1: CGPoint(x: 28.13, y: 786.3), controlPoint2: CGPoint(x: 32.59, y: 790.57))
        bezier30Path.addCurve(to: CGPoint(x: 47.47, y: 780.43), controlPoint1: CGPoint(x: 43.34, y: 790.31), controlPoint2: CGPoint(x: 47.6, y: 785.83))
        bezier30Path.addCurve(to: CGPoint(x: 37.51, y: 770.89), controlPoint1: CGPoint(x: 47.34, y: 775.03), controlPoint2: CGPoint(x: 42.88, y: 770.76))
        bezier30Path.close()
        bezier30Path.usesEvenOddFillRule = true
        fillColor7.setFill()
        bezier30Path.fill()
        strokeColor2.setStroke()
        bezier30Path.lineWidth = 1
        bezier30Path.miterLimit = 4
        bezier30Path.stroke()


        //// Oval 3 Drawing
        context.saveGState()
        context.translateBy(x: 178.7, y: 777.93)
        context.rotate(by: -4.85 * CGFloat.pi/180)

        let oval3Path = UIBezierPath(ovalIn: CGRect(x: -9.75, y: -9.7, width: 19.5, height: 19.4))
        fillColor6.setFill()
        oval3Path.fill()

        context.restoreGState()


        //// Bezier 31 Drawing
        let bezier31Path = UIBezierPath()
        bezier31Path.move(to: CGPoint(x: 178.27, y: 761.55))
        bezier31Path.addCurve(to: CGPoint(x: 194.96, y: 777.52), controlPoint1: CGPoint(x: 187.28, y: 761.33), controlPoint2: CGPoint(x: 194.75, y: 768.48))
        bezier31Path.addCurve(to: CGPoint(x: 179.03, y: 794.29), controlPoint1: CGPoint(x: 195.17, y: 786.56), controlPoint2: CGPoint(x: 188.04, y: 794.07))
        bezier31Path.addCurve(to: CGPoint(x: 162.34, y: 778.32), controlPoint1: CGPoint(x: 170.03, y: 794.51), controlPoint2: CGPoint(x: 162.56, y: 787.36))
        bezier31Path.addCurve(to: CGPoint(x: 178.27, y: 761.55), controlPoint1: CGPoint(x: 162.13, y: 769.27), controlPoint2: CGPoint(x: 169.27, y: 761.77))
        bezier31Path.close()
        bezier31Path.move(to: CGPoint(x: 178.42, y: 768.15))
        bezier31Path.addCurve(to: CGPoint(x: 168.92, y: 778.15), controlPoint1: CGPoint(x: 173.05, y: 768.28), controlPoint2: CGPoint(x: 168.79, y: 772.76))
        bezier31Path.addCurve(to: CGPoint(x: 178.88, y: 787.69), controlPoint1: CGPoint(x: 169.04, y: 783.55), controlPoint2: CGPoint(x: 173.5, y: 787.82))
        bezier31Path.addCurve(to: CGPoint(x: 188.39, y: 777.68), controlPoint1: CGPoint(x: 184.25, y: 787.56), controlPoint2: CGPoint(x: 188.51, y: 783.08))
        bezier31Path.addCurve(to: CGPoint(x: 178.42, y: 768.15), controlPoint1: CGPoint(x: 188.26, y: 772.28), controlPoint2: CGPoint(x: 183.8, y: 768.02))
        bezier31Path.close()
        bezier31Path.usesEvenOddFillRule = true
        fillColor7.setFill()
        bezier31Path.fill()
        strokeColor2.setStroke()
        bezier31Path.lineWidth = 1
        bezier31Path.miterLimit = 4
        bezier31Path.stroke()


        //// Bezier 32 Drawing
        let bezier32Path = UIBezierPath()
        bezier32Path.move(to: CGPoint(x: 136.26, y: 741.27))
        bezier32Path.addCurve(to: CGPoint(x: 138.83, y: 741.15), controlPoint1: CGPoint(x: 137.28, y: 741.21), controlPoint2: CGPoint(x: 138.13, y: 741.16))
        bezier32Path.addCurve(to: CGPoint(x: 142.41, y: 741.12), controlPoint1: CGPoint(x: 139.52, y: 741.13), controlPoint2: CGPoint(x: 140.72, y: 741.12))
        strokeColor.setStroke()
        bezier32Path.lineWidth = 1
        bezier32Path.miterLimit = 4
        bezier32Path.lineCapStyle = .round
        bezier32Path.stroke()


        //// Bezier 33 Drawing
        let bezier33Path = UIBezierPath()
        bezier33Path.move(to: CGPoint(x: 136.15, y: 741.55))
        bezier33Path.addCurve(to: CGPoint(x: 136.48, y: 741.26), controlPoint1: CGPoint(x: 136.33, y: 741.54), controlPoint2: CGPoint(x: 136.48, y: 741.42))
        bezier33Path.addCurve(to: CGPoint(x: 136.14, y: 741), controlPoint1: CGPoint(x: 136.47, y: 741.11), controlPoint2: CGPoint(x: 136.32, y: 740.99))
        bezier33Path.addCurve(to: CGPoint(x: 135.81, y: 741.28), controlPoint1: CGPoint(x: 135.95, y: 741), controlPoint2: CGPoint(x: 135.81, y: 741.13))
        bezier33Path.addCurve(to: CGPoint(x: 136.15, y: 741.55), controlPoint1: CGPoint(x: 135.81, y: 741.43), controlPoint2: CGPoint(x: 135.97, y: 741.55))
        bezier33Path.close()
        fillColor8.setFill()
        bezier33Path.fill()


        //// Bezier 34 Drawing
        let bezier34Path = UIBezierPath()
        bezier34Path.move(to: CGPoint(x: 142.61, y: 740.66))
        bezier34Path.addLine(to: CGPoint(x: 141.94, y: 740.67))
        bezier34Path.addCurve(to: CGPoint(x: 141.76, y: 740.86), controlPoint1: CGPoint(x: 141.84, y: 740.68), controlPoint2: CGPoint(x: 141.76, y: 740.76))
        bezier34Path.addLine(to: CGPoint(x: 141.78, y: 741.29))
        bezier34Path.addCurve(to: CGPoint(x: 141.96, y: 741.47), controlPoint1: CGPoint(x: 141.78, y: 741.39), controlPoint2: CGPoint(x: 141.86, y: 741.47))
        bezier34Path.addLine(to: CGPoint(x: 142.63, y: 741.45))
        bezier34Path.addCurve(to: CGPoint(x: 142.81, y: 741.26), controlPoint1: CGPoint(x: 142.73, y: 741.45), controlPoint2: CGPoint(x: 142.81, y: 741.37))
        bezier34Path.addLine(to: CGPoint(x: 142.8, y: 740.84))
        bezier34Path.addCurve(to: CGPoint(x: 142.61, y: 740.66), controlPoint1: CGPoint(x: 142.8, y: 740.74), controlPoint2: CGPoint(x: 142.71, y: 740.66))
        bezier34Path.close()
        strokeColor.setStroke()
        bezier34Path.lineWidth = 1
        bezier34Path.miterLimit = 4
        bezier34Path.stroke()


        //// Bezier 35 Drawing
        let bezier35Path = UIBezierPath()
        bezier35Path.move(to: CGPoint(x: 136.89, y: 740.55))
        bezier35Path.addLine(to: CGPoint(x: 135.91, y: 740.58))
        bezier35Path.addCurve(to: CGPoint(x: 135.38, y: 741.14), controlPoint1: CGPoint(x: 135.61, y: 740.58), controlPoint2: CGPoint(x: 135.37, y: 740.83))
        bezier35Path.addLine(to: CGPoint(x: 135.39, y: 741.63))
        bezier35Path.addCurve(to: CGPoint(x: 135.95, y: 742.16), controlPoint1: CGPoint(x: 135.4, y: 741.93), controlPoint2: CGPoint(x: 135.65, y: 742.17))
        bezier35Path.addLine(to: CGPoint(x: 136.92, y: 742.14))
        bezier35Path.addCurve(to: CGPoint(x: 137.46, y: 741.58), controlPoint1: CGPoint(x: 137.23, y: 742.13), controlPoint2: CGPoint(x: 137.47, y: 741.88))
        bezier35Path.addLine(to: CGPoint(x: 137.45, y: 741.09))
        bezier35Path.addCurve(to: CGPoint(x: 136.89, y: 740.55), controlPoint1: CGPoint(x: 137.44, y: 740.78), controlPoint2: CGPoint(x: 137.19, y: 740.54))
        bezier35Path.close()
        strokeColor.setStroke()
        bezier35Path.lineWidth = 1
        bezier35Path.miterLimit = 4
        bezier35Path.stroke()


        //// Oval 4 Drawing
        let oval4Path = UIBezierPath(ovalIn: CGRect(x: 135.8, y: 743.82, width: 1.3, height: 1.3))
        strokeColor.setStroke()
        oval4Path.lineWidth = 1
        oval4Path.stroke()


        //// Bezier 36 Drawing
        let bezier36Path = UIBezierPath()
        bezier36Path.move(to: CGPoint(x: 136.46, y: 744.53))
        bezier36Path.addCurve(to: CGPoint(x: 136.55, y: 744.44), controlPoint1: CGPoint(x: 136.51, y: 744.53), controlPoint2: CGPoint(x: 136.55, y: 744.49))
        bezier36Path.addCurve(to: CGPoint(x: 136.46, y: 744.35), controlPoint1: CGPoint(x: 136.55, y: 744.39), controlPoint2: CGPoint(x: 136.51, y: 744.35))
        bezier36Path.addCurve(to: CGPoint(x: 136.37, y: 744.45), controlPoint1: CGPoint(x: 136.41, y: 744.35), controlPoint2: CGPoint(x: 136.37, y: 744.39))
        bezier36Path.addCurve(to: CGPoint(x: 136.46, y: 744.53), controlPoint1: CGPoint(x: 136.37, y: 744.5), controlPoint2: CGPoint(x: 136.41, y: 744.54))
        bezier36Path.close()
        fillColor8.setFill()
        bezier36Path.fill()
        strokeColor.setStroke()
        bezier36Path.lineWidth = 1
        bezier36Path.miterLimit = 4
        bezier36Path.stroke()


        //// Bezier 37 Drawing
        let bezier37Path = UIBezierPath()
        bezier37Path.move(to: CGPoint(x: 49.18, y: 702.1))
        bezier37Path.addLine(to: CGPoint(x: 109.78, y: 700.63))
        bezier37Path.addCurve(to: CGPoint(x: 113.21, y: 703.91), controlPoint1: CGPoint(x: 111.63, y: 700.58), controlPoint2: CGPoint(x: 113.17, y: 702.05))
        bezier37Path.addLine(to: CGPoint(x: 113.67, y: 723.82))
        bezier37Path.addCurve(to: CGPoint(x: 110.4, y: 727.26), controlPoint1: CGPoint(x: 113.71, y: 725.67), controlPoint2: CGPoint(x: 112.25, y: 727.22))
        bezier37Path.addLine(to: CGPoint(x: 49.8, y: 728.73))
        bezier37Path.addCurve(to: CGPoint(x: 46.38, y: 725.45), controlPoint1: CGPoint(x: 47.95, y: 728.78), controlPoint2: CGPoint(x: 46.42, y: 727.31))
        bezier37Path.addLine(to: CGPoint(x: 45.92, y: 705.54))
        bezier37Path.addCurve(to: CGPoint(x: 49.18, y: 702.1), controlPoint1: CGPoint(x: 45.87, y: 703.68), controlPoint2: CGPoint(x: 47.34, y: 702.14))
        bezier37Path.close()
        bezier37Path.move(to: CGPoint(x: 77.96, y: 701.4))
        bezier37Path.addLine(to: CGPoint(x: 78.58, y: 728.03))
        bezier37Path.addLine(to: CGPoint(x: 77.96, y: 701.4))
        bezier37Path.close()
        bezier37Path.move(to: CGPoint(x: 79.48, y: 701.36))
        bezier37Path.addLine(to: CGPoint(x: 80.1, y: 728))
        bezier37Path.addLine(to: CGPoint(x: 79.48, y: 701.36))
        bezier37Path.close()
        bezier37Path.move(to: CGPoint(x: 47.63, y: 700.61))
        bezier37Path.addLine(to: CGPoint(x: 111.27, y: 699.07))
        bezier37Path.addCurve(to: CGPoint(x: 114.69, y: 702.34), controlPoint1: CGPoint(x: 113.12, y: 699.02), controlPoint2: CGPoint(x: 114.65, y: 700.49))
        bezier37Path.addLine(to: CGPoint(x: 115.23, y: 725.31))
        bezier37Path.addCurve(to: CGPoint(x: 111.96, y: 728.75), controlPoint1: CGPoint(x: 115.27, y: 727.17), controlPoint2: CGPoint(x: 113.81, y: 728.71))
        bezier37Path.addLine(to: CGPoint(x: 48.32, y: 730.29))
        bezier37Path.addCurve(to: CGPoint(x: 44.89, y: 727.02), controlPoint1: CGPoint(x: 46.47, y: 730.34), controlPoint2: CGPoint(x: 44.93, y: 728.87))
        bezier37Path.addLine(to: CGPoint(x: 44.36, y: 704.05))
        bezier37Path.addCurve(to: CGPoint(x: 47.63, y: 700.61), controlPoint1: CGPoint(x: 44.32, y: 702.19), controlPoint2: CGPoint(x: 45.78, y: 700.65))
        bezier37Path.close()
        strokeColor.setStroke()
        bezier37Path.lineWidth = 1
        bezier37Path.miterLimit = 4
        bezier37Path.stroke()


        //// Bezier 38 Drawing
        let bezier38Path = UIBezierPath()
        bezier38Path.move(to: CGPoint(x: 0, y: 73))
        bezier38Path.addCurve(to: CGPoint(x: 3, y: 70), controlPoint1: CGPoint(x: 0, y: 71.34), controlPoint2: CGPoint(x: 1.34, y: 70))
        bezier38Path.addLine(to: CGPoint(x: 372, y: 70))
        bezier38Path.addCurve(to: CGPoint(x: 375, y: 73), controlPoint1: CGPoint(x: 373.66, y: 70), controlPoint2: CGPoint(x: 375, y: 71.34))
        bezier38Path.addLine(to: CGPoint(x: 375, y: 809))
        bezier38Path.addCurve(to: CGPoint(x: 372, y: 812), controlPoint1: CGPoint(x: 375, y: 810.66), controlPoint2: CGPoint(x: 373.66, y: 812))
        bezier38Path.addLine(to: CGPoint(x: 3, y: 812))
        bezier38Path.addCurve(to: CGPoint(x: 0, y: 809), controlPoint1: CGPoint(x: 1.34, y: 812), controlPoint2: CGPoint(x: 0, y: 810.66))
        bezier38Path.addLine(to: CGPoint(x: 0, y: 73))
        bezier38Path.close()
        fillColor9.setFill()
        bezier38Path.fill()


        //// Rectangle 5 Drawing
        let rectangle5Path = UIBezierPath(rect: CGRect(x: 0, y: 70, width: 375, height: 741))
        context.saveGState()
        rectangle5Path.addClip()
        context.drawLinearGradient(paint1_linear,
            start: CGPoint(x: 187.5, y: 70),
            end: CGPoint(x: 187.5, y: 811),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()

    }




    @objc(SKSignupBackgroundResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
